snippet javaclass "JavaClass"
${3}

public class $1 {

	public $1() {
		${2}
	}
}
endsnippet
snippet javamainclass "JavaMainClass"
/*
 @author Josué Romero
 @date `!v strftime("%d/%m/%Y")`
*/
${3}

public class $1 {

	public $1() {
		${2}
	}

	public static void main(String[] args) {
		$1 instance = new $1();
	}
}
endsnippet
snippet javaoppclass "JavaClass for OOP"
/*
  Utility
*/
public class $1 {
	${2}

	public $1($3) {
		${4}
	}
	
	${5}
}
endsnippet

## Encapsulation
snippet pr "private"
private ${0}
endsnippet
snippet po "protected"
protected ${0}
endsnippet
snippet pu "public"
public ${0}
endsnippet

## Annotations
snippet before "static void ${1:intercept}(${2:args}) { ${0} }"
@Before
static void ${1:intercept}(${2:args}) { ${0} }
endsnippet
snippet mm "ManyToMany"
@ManyToMany
${0}
endsnippet
snippet mo "ManyToOne"
@ManyToOne
${0}
endsnippet
snippet om "OneToMany"
@OneToMany${1:(cascade=CascadeType.ALL)}
${0}
endsnippet
snippet om "OneToOne"
@OneToOne${1:(cascade=CascadeType.ALL)}
${0}
endsnippet

## Methods for data entry
snippet nexi "sc.nextInt();"
sc.nextInt();
$1
endsnippet
snippet nexf "sc.nextFloat();"
sc.nextFloat();
$1
endsnippet
snippet nexs "sc.nextLine();"
sc.nextLine();
$1
endsnippet
snippet nexd "sc.nextDouble();"
sc.nextDouble();
$1
endsnippet
snippet nexc "sc.next().charAt(0);"
sc.next().charAt(0);
$1
endsnippet
snippet nexb "sc.nextByte();"
sc.nextByte();
$1
endsnippet
snippet nexh "sc.nextShort();"
sc.nextShort();
$1
endsnippet
snippet nexl "sc.nextLong();"
sc.nextLong();
$1
endsnippet

## Arrangement
snippet arr "${1:int} arr = new ${1:int}[$2];"
${1:int}[] arr = new ${1:int}[$2];
$3
endsnippet
snippet len "length"
length
endsnippet
snippet arrto "Arrays.toString(nameArray)"
Arrays.toString($1)
endsnippet
snippet arrso "Arrays.sort(nameArray);"
Arrays.sort($1);
$2
endsnippet
snippet arrbi "Arrays.binarySearch(byte[] a, byte key)"
Arrays.binarySearch(int[] ${0:nombreDelArreglo}, int ${1:numeroABuscar});
$2
endsnippet
snippet arrde  "Arrays.deepToString(Object[] a)"
Arrays.deepToString(String[] ${0:nombreDelArreglo});$1
endsnippet
snippet ins "Rellenar instancia"
$1 $2 = new $1($3);
$4
endsnippet

## Basic Java packages and import
snippet ij "import java.$1;"
import java.$1;
endsnippet
snippet iji "import java.io.$1;"
import java.io.$1;
endsnippet
snippet ijm "import java.math.$1;"
import java.math.$1;
endsnippet
snippet ijxs "import java.swing.$1;"
import javax.swing.$1;
endsnippet
snippet iju "import java.util.$1;"
import java.util.$1;
endsnippet

## Class Enhancements
snippet ext "extends"
extends ${0}
endsnippet
snippet imp "implements"
implements ${0}
endsnippet
snippet abs "abstract"
abstract ${0}
endsnippet
snippet int "interface"
interface ${0}
endsnippet

## Comments
snippet /* "JavaDoc"
/*
- @author Josué Romero
- @date `!v strftime("%d/%m/%Y")` COL
*/
endsnippet

## Constants
snippet co "static public final"
static public final ${1:String} ${2:var} = ${3};
endsnippet
snippet cos "static public final String"
static public final String ${1:var} = "${2}";
endsnippet

## Control Statements
snippet case "case"
case ${1}:
	${0}
endsnippet
snippet def "default"
default:
	$1
endsnippet
snippet el "else {$1}"
else {
	$1
}
endsnippet
snippet elif "else if ($1) {$2}"
else if ($1) {
	$2
}
endsnippet
snippet if "if ($1) {$2}"
if (${1}) ${0}
endsnippet
snippet sw "switch ($1) {$2}"
switch ($1) {
	$2
}
endsnippet

## Create a Method
snippet method "Método para rellenar"
${1:void} ${2:method}(${3}) ${4:throws }
endsnippet

## Create a Variable
snippet var "Rellenar atributo"
${1:String} ${2:var}${3: = null}${4};
endsnippet

## Declaration for ArrayList
snippet d.al "List<Object> name = new ArrayList<Object>();"
List<${1:Object}> ${2:nameList} = new ArrayList<$1>();${3}
endsnippet
## Declaration for HashMap
snippet d.hm "Map<Objects> nameMap = new HashMap<>();"
Map<${1:Object}, ${2:Object}> ${3:name} = new HashMap<$1, $2>();$4
endsnippet
## Declaration for HashSet
snippet d.hs "Set<Object> nameSet = new HashSet<>();"
Set<${1:Object}> ${2:nameSet} = new HashSet<$1>();$3
endsnippet
## Declaration for Stack
snippet d.st "Stack<Object> pila = new Stack<>();"
Stack<${1:Object}> ${2:pila} = new Stack<$1>();$3
endsnippet

## Singleton Pattern
snippet singlet "Método Holder"
private static class Holder {
	private static final ${1:`vim_snippets#Filename("$1")`} INSTANCE = new $1();
}

private $1() { }

public static $1 getInstance() {
	return Holder.INSTANCE;
}
endsnippet

## Enhancements to Methods, variables, classes, etc.
snippet fi "final"
final ${0}
endsnippet
snippet st "static"
static ${0}
endsnippet
snippet sy "synchronized"
synchronized ${0}
endsnippet

## Error Methods
snippet err "System.err.print(message);"
System.err.print("${0:Message}");
endsnippet
snippet errln "System.err.println(message);"
System.err.println("${0:Message}");
endsnippet
snippet errf "System.err.printf(message, exception);"
System.err.printf("${1:Message}", ${0:exception});
endsnippet

## Exception Handling
snippet as
assert ${1:test} : "${2:Failure message}";
endsnippet
snippet ae
assertEquals("${1:Failure message}", ${2:expected}, ${3:actual});
endsnippet
snippet aae
assertArrayEquals("${1:Failure message}", ${2:expecteds}, ${3:actuals});
endsnippet
snippet af
assertFalse("${1:Failure message}", ${2:condition});
endsnippet
snippet at
assertTrue("${1:Failure message}", ${2:condition});
endsnippet
snippet an
assertNull("${1:Failure message}", ${2:object});
endsnippet
snippet ann
assertNotNull("${1:Failure message}", ${2:object});
endsnippet
snippet ass
assertSame("${1:Failure message}", ${2:expected}, ${3:actual});
endsnippet
snippet asns
assertNotSame("${1:Failure message}", ${2:expected}, ${3:actual});
endsnippet
snippet fa "fail()"
fail("${1:Failure message}");
endsnippet
snippet ca "catch()"
catch(${1:Exception} ${2:e}) ${0}
endsnippet
snippet thr "throw"
throw ${0}
endsnippet
snippet ths "throws"
throws ${0}
endsnippet
snippet try "try and catch}"
try {
	${0:${VISUAL}}
} catch(${1:Exception} ${2:e}) {
}
endsnippet
snippet tryf "try, catch and finally"
try {
	${1}
} catch(Exception ${2:e}) {
} finally {
	${3}
}
endsnippet

## Find Methods
snippet findall "List<$1> items$2 = $1.findAll();$3"
List<${1:listName}> ${2:items} = $1.findAll();$3
endsnippet
snippet findbyid "${1:var} ${2:item} = $1.findById(${3});"
${1:var} ${2:item} = $1.findById(${3});
endsnippet

## JavaDocs
snippet @au "@autor "
@author `system("grep \`id -un\` /etc/passwd | cut -d \":\" -f5 | cut -d \",\" -f1")`
endsnippet
snippet @br "@brief "
@brief ${0:Description}
endsnippet
snippet @fi "@file "
@file ${0:`vim_snippets#Filename("$1")`}.java
endsnippet
snippet @pa "@param "
@param ${0:param}
endsnippet
snippet @da "@date "
@date `!v strftime("%d-%m-%Y")`
endsnippet
snippet @re "@return "
@return ${0:param}
endsnippet

## Logger Methods
snippet debug "Logger.debug();"
Logger.debug(${1:param});
endsnippet
snippet error "Logger.error();"
Logger.error(${1:param});
endsnippet
snippet info "Logger.info();"
Logger.info(${1:param});
endsnippet
snippet warn "Logger.warn();"
Logger.warn(${1:param});
endsnippet

## Loops
snippet for "for (int $1; $1 $2; $1++)"
for (int $1; $1 $2; $1++) {
	$3
}
endsnippet
snippet fori "for (int i = 0; i < $1.length; i++) {body}"
for (int i = 0; i < $1.length; i++) {
	${2}
}
endsnippet
snippet wh "while ($1) { ${2} }"
int i = 0$0;
while ($1) {
	${2}
}
endsnippet

## Main method
snippet main "public static void main (String[] args) { ${0} }"
public static void main (String[] args) {
	${0}
}
endsnippet

## Print Methods
snippet s "System.out.print("");"
System.out.print("$0");$1
endsnippet
snippet ss "System.out.println("");"
System.out.println("$0");$1
endsnippet
snippet sf "System.out.prinf(message, args);"
System.out.printf("${0:Message}", ${1:args});$2
endsnippet
snippet ssar "System.out.println("$1: " + Arrays.toString($0));"
System.out.println("$1: " + Arrays.toString($0));$2
endsnippet

## Render Methods
snippet ren "render();"
render(${1:param});
endsnippet
snippet rena "renderArgs();"
renderArgs.put("${1}", ${2});
endsnippet
snippet renb "renderBinary();"
renderBinary(${1:param});
endsnippet
snippet renj "renderJSON();"
renderJSON(${1:param});
endsnippet
snippet renx "renderXml();"
renderXml(${1:param});
endsnippet

## Setter and Getter Methods
snippet set "Método Set"
${1:public} void set${3:}(${2:String} ${0:}){
	this.$4 = $4;
}
endsnippet
snippet get "Método Get"
${1:public} ${2:String} get${3:}(){
	return this.${0:};
}
endsnippet

## Terminate Methods or Loops
snippet ca "case"
case $1: $2
endsnippet
snippet re "return"
return ${0}
endsnippet
snippet br "break"
break;
endsnippet

## Test Methods
snippet psi "public static int nameMethod() {body}"
public static int ${1:nameMethod}() {
	$2
	return ${3:1};
}
endsnippet
snippet pss "public static String nameMethod() {body}"
public static String ${1:nameMethod}() {
	$2
	return ${3:"result"};
}
endsnippet
snippet ps "public static {datatype} nameMethod() {body}"
public static $1 ${2:nameMethod}() {
	$3
	return ${3:0};
}
endsnippet
snippet psv "public static void nameMethod() {body}"
public static void ${1:nameMethod}() {
	$2
}
endsnippet
snippet tes "public void test$1() throws Exception { ${0} }"
public void test${1:Name}() throws Exception {
	${0}
}
endsnippet
snippet test "public void test$1() throws Exception { ${0} }"
@Test
public void test${1:Name}() throws Exception {
	${0}
}
endsnippet

## Utils
snippet sc "Scanner sc = new Scanner(System.in);"
Scanner sc = new Scanner(System.in);
$1
endsnippet

## Miscellaneous
snippet action "public static void ${1:index}(${2:args}) { ${0} }"
public static void ${1:index}(${2:args}) { ${0} }
endsnippet
snippet rnf "notFound(${1:param});"
notFound(${1:param});
endsnippet
snippet rnfin "notFoundIfNull(${1:param});"
notFoundIfNull(${1:param});
endsnippet
snippet rr "redirect(${1:param});"
redirect(${1:param});
endsnippet
snippet ru "unauthorized(${1:param});"
unauthorized(${1:param});
endsnippet
snippet unless "(unless=${1:param});"
(unless=${1:param});
endsnippet

## Class
snippet pcl "public class nameFile() { ${0} }"
	public class $1 { ${2} }
endsnippet
snippet pin "public interface nameFile() { ${0} }"
	public interface $1
endsnippet
snippet her "public class $1() extends { ${2} }"
	public class $1() extends { ${2} }
endsnippet
